Macro:
# complete OS
# (scheduling, filesystem, network, device drivers, Memory Management, paging, etc.)


Pro Macrokernel:
+ weniger Kommunikation zwischen den Teilen
+ mehr Funktionalität in Kernelmodus -> weniger Overhead beim Kontextwechsel -> scheller
+ Betriebssystem stellt sämtliche Funtionen

Contra Macrokernel:
- fehleranfälliger (nicht so gut mit abstürzen umgehen wie theoretisch bei Microkernel)
- Sourcecode abhängingkeiten (kompletter build)
- schwer zu verfizieren


Micro:
# address spaces, IPC, basic scheduling
# servers

Pro Microkernel:
+ Different APIs co-operating
+ flexible and extensible
+ online testing
+ multithreading, IPC von allen genutzt
+ isolated server malfunction (wie normaler Programm Absturz)
+ ebenso Gerätetreiber
+ sauberes Interface -> modularität
+ easily maintainable, less error prone
+ reduced Interdependencies -> trusted Computing

Contra Microkernel:
- Last auf IPC
- RPC Overhead
- richtige Portierung für Vorteile
- evtl trotzdem langsam
- zur effizienz wird unabhängigkeit korumpiert

weitere Quellen:
https://de.wikipedia.org/wiki/Monolithischer_Kernel
